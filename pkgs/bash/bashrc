#Executed by Bash for non-login shells
##########################################################################
##                                                                      ##
##      This file is executed by Bash for non-login shells              ##
##                 Tue Jan 24 17:45:00 PST 2017                         ##
##                                                                      ##
##########################################################################


################################ META OPTIONS      ##########################
[ -z "$PS1" ] && return                                         # If not running interactively, don't do anything. Bash also sources this file for non-interactive remote shells.
                                                                # If this file echos anything to stdout, this will break things like scp. So if not interactive, it's best to just quit.
                                                                # http://unix.stackexchange.com/questions/257571/why-does-bashrc-check-whether-the-current-shell-is-interactive


################################ BASH OPTIONS      ##########################
shopt -s histappend                                             # This tells Bash to append the history list to the history file at the end of a Bash session instead of overwriting the file.
set -o noclobber                                                # This will prevent accidental overwriting of files. To bypass, use `>|`. As in: "ls /etc/* >| myExistingFile.txt"
shopt -s checkwinsize                                           # If set, Bash checks the window size after each command and, if necessary, updates the values of LINES and COLUMNS.

################################  EXTERNAL OPTIONS ##########################
stty -ixon                                                      # Prevent terminal/tty from disruptions caused by Ctrl-S and Ctrl-Q


################################  BASH EXTENSIONS  ##########################
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"    # Makes 'less' more friendly for non-text input files such as tar files, gzipped, graphical, etc...

if [ -f /etc/bash_completion ] && ! shopt -oq posix; then       # Enable programmable completion features if present on the current machine.
    . /etc/bash_completion
fi

################################  BASH VARIABLES   ##########################
HISTCONTROL=ignoredups:ignorespace                              # Don't log duplocate commands or commands that start with a space in the history file
HISTSIZE=1000                                                   # This is the number of lines/commands stored in memory in history list while the Bash session is ONGOING!
HISTFILESIZE=2000                                               # This is the number of lines/commands allowed in history file at startup and end of Bash session!

if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then   # If in chrooted system, set debian_chroot variable to the chroot name. This can be used later, such as the prompt!
    debian_chroot=$(cat /etc/debian_chroot)
fi


################################  ENVIORNMENT VARIABLES  ####################
TERM=screen-256color                                            # Set the TERM variable to "screen-256color" to indicate it can support 256 color mode (Needed for 256 colors in Tmux/Screen)
EDITOR=vim                                                      # Set the default editor to be Vim instead of Nano
export PIP_REQUIRE_VIRTUALENV=true                              # (Python) pip should only run if there is a virtualenv currently activated (See helpful functions for overriding this!)
export WORKON_HOME=~/.virtualenvs                               # Set `workon` home dir for virtualenvwrapper
source /usr/local/bin/virtualenvwrapper.sh                      # Source the VirtualEnvWrapper script to enable its functionality

RED="\[\033[0;31m\]"											# Sets the RED variable to the bash escape sequence representing the color red
PINK="\[\033[1;31m\]"											# Sets the PINK variable to the bash escape sequence representing the color pink
YELLOW="\[\033[1;33m\]"											# Sets the YELLOW variable to the bash escape sequence representing the color yellow
GREEN="\[\033[0;32m\]"											# Sets the GREEN variable to the bash escape sequence representing the color green
LT_GREEN="\[\033[1;32m\]"										# Sets the LT_GREEN variable to the bash escape sequence representing the color light green
BLUE="\[\033[0;34m\]"											# Sets the BLUE variable to the bash escape sequence representing the color blue
WHITE="\[\033[1;37m\]"											# Sets the WHITE variable to the bash escape sequence representing the color white
PURPLE="\[\033[1;35m\]"											# Sets the PURPLE variable to the bash escape sequence representing the color purple
CYAN="\[\033[1;36m\]"											# Sets the CYAN variable to the bash escape sequence representing the color cyan
BROWN="\[\033[0;33m\]"											# Sets the BROWN variable to the bash escape sequence representing the color brown
COLOR_NONE="\[\033[0m\]"										# Sets the COLOR_NONE variable to the bash escape sequence representing no color

################################  HELPFUL FUNCTIONS  ########################
title (){                                                       # Will set the Terminal App's window/tab title to the passed argument.
    echo -ne "\033]0;"$*"\007"
}

gpip(){                                                         # This function will let us override the pip virtualenv requirment and use pip globally (see Enviornment Variables)
    PIP_REQUIRE_VIRTUALENV="" pip "$@"
}

extract () {													# This function will attempt to extract the contents of a known archive type
   if [ -f $1 ] ; then
       case $1 in
           *.tar.bz2)   tar xvjf $1    ;;
           *.tar.gz)    tar xvzf $1    ;;
           *.bz2)       bunzip2 $1     ;;
           *.rar)       unrar x $1       ;;
           *.gz)        gunzip $1      ;;
           *.tar)       tar xvf $1     ;;
           *.tbz2)      tar xvjf $1    ;;
           *.tgz)       tar xvzf $1    ;;
           *.zip)       unzip $1       ;;
           *.Z)         uncompress $1  ;;
           *.7z)        7z x $1        ;;
           *)           echo "don't know how to extract '$1'..." ;;
       esac
   else
       echo "'$1' is not a valid file!"
   fi
 }
